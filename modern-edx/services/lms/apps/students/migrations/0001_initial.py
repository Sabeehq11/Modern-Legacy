# Generated by Django 4.2.7 on 2025-07-25 02:35

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='beginner', max_length=20)),
                ('major', models.CharField(blank=True, max_length=100)),
                ('year_of_study', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(8)])),
                ('graduation_year', models.PositiveIntegerField(blank=True, null=True)),
                ('interests', models.TextField(blank=True, help_text='Comma-separated list of interests')),
                ('learning_goals', models.TextField(blank=True)),
                ('preferred_learning_style', models.CharField(blank=True, choices=[('visual', 'Visual Learner'), ('auditory', 'Auditory Learner'), ('kinesthetic', 'Kinesthetic Learner'), ('reading_writing', 'Reading/Writing Learner'), ('multimodal', 'Multimodal Learner')], max_length=20)),
                ('study_hours_per_week', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(168)])),
                ('total_courses_completed', models.PositiveIntegerField(default=0)),
                ('total_certificates_earned', models.PositiveIntegerField(default=0)),
                ('total_study_hours', models.PositiveIntegerField(default=0)),
                ('current_streak_days', models.PositiveIntegerField(default=0)),
                ('longest_streak_days', models.PositiveIntegerField(default=0)),
                ('forum_posts_count', models.PositiveIntegerField(default=0)),
                ('assignments_submitted', models.PositiveIntegerField(default=0)),
                ('last_activity_date', models.DateTimeField(blank=True, null=True)),
                ('email_reminders', models.BooleanField(default=True)),
                ('discussion_notifications', models.BooleanField(default=True)),
                ('weekly_progress_report', models.BooleanField(default=True)),
                ('public_profile', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student Profile',
                'verbose_name_plural': 'Student Profiles',
                'db_table': 'students_profile',
            },
        ),
        migrations.CreateModel(
            name='LearningAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_time_spent', models.DurationField(default='00:00:00')),
                ('average_session_duration', models.DurationField(default='00:00:00')),
                ('sessions_count', models.PositiveIntegerField(default=0)),
                ('average_assignment_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('average_quiz_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('completion_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('video_watch_time', models.DurationField(default='00:00:00')),
                ('reading_time', models.DurationField(default='00:00:00')),
                ('forum_engagement_score', models.PositiveIntegerField(default=0)),
                ('peer_interaction_count', models.PositiveIntegerField(default=0)),
                ('most_active_day_of_week', models.CharField(blank=True, max_length=10)),
                ('most_active_time_of_day', models.TimeField(blank=True, null=True)),
                ('preferred_content_type', models.CharField(blank=True, choices=[('video', 'Video'), ('reading', 'Reading'), ('interactive', 'Interactive'), ('assessment', 'Assessment')], max_length=20)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='learning_analytics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Learning Analytics',
                'verbose_name_plural': 'Learning Analytics',
                'db_table': 'students_learning_analytics',
            },
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course', models.CharField(blank=True, help_text='Course identifier if achievement is course-specific', max_length=255)),
                ('badge_type', models.CharField(choices=[('completion', 'Course Completion'), ('streak', 'Learning Streak'), ('participation', 'Active Participation'), ('excellence', 'Academic Excellence'), ('collaboration', 'Collaboration'), ('innovation', 'Innovation'), ('leadership', 'Leadership'), ('milestone', 'Milestone Achievement')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('points', models.PositiveIntegerField(default=0)),
                ('badge_image_url', models.URLField(blank=True)),
                ('badge_color', models.CharField(default='#FFD700', help_text='Hex color code for badge', max_length=7)),
                ('criteria_met', models.JSONField(default=dict, help_text='JSON object describing the criteria that were met')),
                ('earned_date', models.DateTimeField(auto_now_add=True)),
                ('is_featured', models.BooleanField(default=False, help_text='Whether to feature this achievement on profile')),
                ('is_public', models.BooleanField(default=True, help_text='Whether achievement is visible to others')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Achievement',
                'verbose_name_plural': 'Achievements',
                'db_table': 'students_achievement',
                'ordering': ['-earned_date'],
                'unique_together': {('user', 'course', 'badge_type', 'title')},
            },
        ),
    ]
